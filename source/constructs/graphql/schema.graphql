

schema {
	query: Query
	mutation: Mutation
}


type Query {
    # List OpenSearch Domain names in a region
    listDomainNames(region: String): DomainNames

    # Get OpenSearch domain vpc info
    getDomainVpc(domainName: String!, region:String): ESVPCInfo

    # List imported domain details.
    listImportedDomains(metrics: Boolean): [ImportedDomain]

    # Get Domain Detail by ID
    getDomainDetails(id: ID!, metrics: Boolean): DomainDetails

    # List service logging pipeline info
    listServicePipelines(page: Int, count: Int): ListServicePipelineResponse

    # Get service logging pipeline info by ID
    getServicePipeline(id: ID!): ServicePipeline

    # List Common AWS Resources
    listResources(type: ResourceType!, parentId: String, region: String): [Resource]

    # Get logging bucket for a type of resource by resource name or id
    getResourceLoggingBucket(type: ResourceType!, resourceName: String!, region: String): LoggingBucket

    
    # *The following belongs to applog* #

    # List instance group info
    listInstanceGroups(page: Int, count: Int): ListInstanceGroupResponse

    # Get instance group info by ID
    getInstanceGroup(id: ID!): InstanceGroup

    # List logging conf info
    listLogConfs(page: Int, count: Int): ListLogConfResponse

    # Get logging conf info by ID
    getLogConf(id: ID!): LogConf

    # List app pipeline info
    listAppPipelines(page: Int, count: Int): ListAppPipelineResponse

    # Get app pipeline info by ID
    getAppPipeline(id: ID!): AppPipeline

    # List app logging ingestion info
    listAppLogIngestions(page: Int, count: Int, appPipelineId: String,sourceId:String,sourceType: LogSourceType): ListAppLogIngestionResponse

    # Get app logging ingestion info by ID
    getAppLogIngestion(id: ID!): AppLogIngestion

    # List AWS Instance
    listInstances(maxResults: Int, nextToken: String, instanceSet: [String],tags:[TagFilterInput]): ListInstanceResponse

    # Get Instance Meta by ID
    getInstanceMeta(id: ID!): InstanceMeta

    # Get logging Agent Status by instanceId
    getLogAgentStatus(instanceId: String!): LogAgentStatus

    # Verify if CIDR Conflict
    validateVpcCidr(domainName: String!, region: String): String

    # Get logging source info by ID
    getLogSource(sourceType: LogSourceType!, id: ID!): LogSource

    # List logging source conf info
    listLogSources(page: Int, count: Int): ListLogSourceResponse

    # Get imported EKS Cluster details by eksClusterId
    getEKSClusterDetails(eksClusterId: String!): EKSClusterLogSource

    # Get eks daemon set config by eks source id
    getEKSDaemonSetConfig(eksClusterId: String!): String

    # Get eks deployment configuration by eksClusterId and ingestion id
    getEKSDeploymentConfig(eksClusterId: String!, ingestionId: String!): String

    # List EKS Cluster info
    listEKSClusterNames(nextToken: String!, isListAll: Boolean): ListEKSClustersResponse

    # List imported EKS Cluster info
    listImportedEKSClusters(page: Int, count: Int): ListImportedEKSClustersResponse
}

type Mutation {
    # Import an OpenSearch Domain
    importDomain(domainName: String!, region: String, vpc: VPCInput, tags: [TagInput]): String

    # Remove an OpenSearch Domain by ID
    removeDomain(id: ID!): String

    # Create a new service pipeline
    createServicePipeline(type: ServiceType!, source: String, target: String, parameters: [ParameterInput], tags: [TagInput]): String

    # Remove a service pipeline
    deleteServicePipeline(id: ID!): String

    # Create an nginx proxy stack for OpenSearch
    createProxyForOpenSearch(id: ID!, input: ProxyInput! ): String

    # Create an alarm stack for OpenSearch
    createAlarmForOpenSearch(id: ID!, input: AlarmStackInput! ): String

    # Delete an nginx proxy stack for OpenSearch
    deleteProxyForOpenSearch(id: ID!): String

    # Delete an alarm stack for OpenSearch domain
    deleteAlarmForOpenSearch(id: ID!): String

    # Put logging bucket for a type of resource by resource name or id
    putResourceLoggingBucket(type: ResourceType!, resourceName: String!, region: String): LoggingBucket


    # *The following belongs to applog* #

    # Create a new instance group
    createInstanceGroup(groupName: String!, instanceSet: [String!]!): String

    # Remove a instance group
    deleteInstanceGroup(id: ID!): String
    
    # Update a instance group
    updateInstanceGroup(id: ID!,groupName: String!, instanceSet: [String!]!): String

    # Create a logging conf
    createLogConf(confName: String!, logPath: String!, logType: LogType!, multilineLogParser: MultiLineLogParser, userLogFormat: String, regularExpression: String, regularSpecs: [RegularSpecInput]): String

    # Remove a logging conf
    deleteLogConf(id: ID!): String
    
    # Update a logging conf
    updateLogConf(id: ID!,confName: String!,logPath: String!, logType: LogType!, multilineLogParser: MultiLineLogParser, userLogFormat: String, regularExpression: String, regularSpecs: [RegularSpecInput]): String

    # Create a new app pipeline
    createAppPipeline(kdsParas: KDSParameterInput!, aosParas: AOSParameterInput!, tags: [TagInput]): String

    # Remove a app pipeline
    deleteAppPipeline(id: ID!): String

    # Create a new app logging ingestion
    createAppLogIngestion(confId: String!, sourceIds: [String!], sourceType: LogSourceType!, stackId: String, stackName: String, appPipelineId: String!, tags:[TagInput]): String 

    # Remove a app logging ingestion
    deleteAppLogIngestion(ids: [ID!]!): String

    # request to install logging agent
    requestInstallLogAgent(instanceIdSet: [String!]!): String

    # Create a logging source conf
    createLogSource(sourceType: LogSourceType!, logPath: String, s3Name: String, s3Prefix: String, accountId: String, region: String, archiveFormat: ArchiveFormat, tags: [TagInput]): String

    # Remove a logging source conf
    deleteLogSource(id: ID!): String
    
    # Update a logging source conf
    updateLogSource(id: ID!): String

    #Import an EKS Cluster
    importEKSCluster(aosDomainId:ID!,eksClusterName:String!,cri:CRI,accountId:String, region:String,deploymentKind:EKSDeployKind!,tags: [TagInput]): String
    # Remove an EKS Cluster by ID
    removeEKSCluster(id: ID!): String

    #create EKS Cluster Pod log pipeline & ingestion
    createEKSClusterPodLogIngestion(kdsParas: KDSParameterInput!, aosParas: AOSParameterInput!,confId: String!, eksClusterId: String!,tags:[TagInput]):String
    

}


type DomainNames {
    domainNames: [String!]
}

enum DomainHealth {
    GREEN,
    RED,
    YELLOW,
    UNKNOWN,
}

enum EngineType {
    Elasticsearch
    OpenSearch
}

type DomainMetrics {
    searchableDocs: Float
    freeStorageSpace: Float
    health: DomainHealth
}


input ISMInput {
    index: String
    hotAge: Int
    warmAge: Int
    retention: Int
}

type ISM {
    index: String
    hotAge: Int
    warmAge: Int
    retention: Int
}


input VPCInput {
    vpcId: String!
    publicSubnetIds: String
    privateSubnetIds: String
    securityGroupId: String!
}

type VPCInfo {
    vpcId: String!
    privateSubnetIds: String
    publicSubnetIds: String
    securityGroupId: String
}


type ESVPCInfo {
    vpcId: String!
    subnetIds: [String!]
    availabilityZones: [String]
    securityGroupIds: [String]
}

type ImportedDomain {
    id: ID!
    domainName: String!
    engine: EngineType
    version: String!
    endpoint: String!
    metrics: DomainMetrics
}

# Node Info
type Node {
    instanceType: String!
    instanceCount: Int
    dedicatedMasterEnabled: Boolean
    zoneAwarenessEnabled: Boolean
    dedicatedMasterType: String
    dedicatedMasterCount: Int
    warmEnabled: Boolean
    warmType: String
    warmCount: Int
    coldEnabled: Boolean
}

enum StorageType {
    EBS
    Instance
}

# Volume Type
enum VolumeType {
    gp2
}

# Volume Info
type Volume {
  type: VolumeType!
  size: Int!
}

# Cognito info
type Cognito {
    enabled: Boolean
    userPoolId: String
    domain: String
    identityPoolId: String
    roleArn: String
}

type DomainDetails {
    id: ID!
    domainArn: String!
    domainName: String!
    engine: EngineType
    version: String!
    endpoint: String!
    region: String
    accountId: String
    vpc: VPCInfo
    esVpc: ESVPCInfo
    nodes: Node
    storageType: StorageType!
    volume: Volume
    cognito: Cognito
    tags: [Tag]
    proxyStatus: StackStatus
    proxyALB: String
    proxyError: String
    proxyInput: ProxyInfo
    alarmStatus: StackStatus
    alarmError: String
    alarmInput: AlarmStackInfo
    metrics: DomainMetrics
    status: String
}


enum StackStatus {
	CREATING
    DELETING
	ERROR
    ENABLED
    DISABLED
}

enum PipelineStatus {
	ACTIVE
	INACTIVE
	CREATING
    DELETING
	ERROR
}
enum ServiceType {
    S3
    CloudTrail
    CloudFront
    RDS
    VPC
    Lambda
    ELB
    WAF
}


type Tag {
    key: String
    value: String
}

type ServicePipeline {
    id: ID!
    type: ServiceType!
    source: String
    target: String
    parameters: [Parameter]
    createdDt: String
    status: PipelineStatus
    tags: [Tag]
    error: String
}

type ListServicePipelineResponse {
    pipelines: [ServicePipeline]
    total: Int
}

input TagInput {
    key: String
    value: String
}

input TagFilterInput {
    Key: String
    Values: [String]
}


type Parameter {
    parameterKey: String
    parameterValue: String
}


input ParameterInput {
    parameterKey: String
    parameterValue: String
}


type Resource {
	id: String!
	name: String!
	parentId: String
	description: String
}

enum ResourceType {
	S3Bucket
	VPC
	Subnet
	SecurityGroup
	Certificate
    Trail
    KeyPair
    Distribution
    RDS
    Lambda
    ELB
    WAF
}

input ProxyInput {
    vpc: VPCInput!
    certificateArn: String!
    keyName: String!
    customEndpoint: String!
    cognitoEndpoint: String
}

type ProxyInfo {
    vpc: VPCInfo
    certificateArn: String
    keyName: String
    customEndpoint: String
    cognitoEndpoint: String
}


enum AlarmType {
    CLUSTER_RED
    CLUSTER_YELLOW
    FREE_STORAGE_SPACE
    WRITE_BLOCKED
    NODE_UNREACHABLE
    SNAPSHOT_FAILED
    CPU_UTILIZATION
    JVM_MEMORY_PRESSURE
    KMS_KEY_DISABLED
    KMS_KEY_INACCESSIBLE
    MASTER_CPU_UTILIZATION
    MASTER_JVM_MEMORY_PRESSURE
}

input AlarmInput {
    type: AlarmType
    value: String
}

input AlarmStackInput {
    alarms: [AlarmInput]
    email: String
    phone: String
}

type AlarmInfo {
    type: AlarmType
    value: String
}

type AlarmStackInfo {
    alarms: [AlarmInfo]
    email: String
    phone: String
}

type LoggingBucket {
    enabled: Boolean
    bucket: String
    prefix: String
}

# *The following belongs to applog* #

type InstanceGroup {
    id: ID!
    groupName: String
    instanceSet:[String]
    createdDt: String
    status: String
}

type ListInstanceGroupResponse {
    instanceGroups: [InstanceGroup]
    total: Int
}

enum LogType {
    JSON
    Regex
    Nginx
    Apache
    SingleLineText
    MultiLineText
}

enum MultiLineLogParser {
    JAVA_SPRING_BOOT
    CUSTOM
}

enum ArchiveFormat {
    gzip
    json
    text
}

enum LogSourceType {
    EC2
    S3
    EKSCluster
}

type LogConf {
    id: ID!
    confName: String
    logPath: String
    logType: LogType
    multilineLogParser: MultiLineLogParser
    createdDt: String
    userLogFormat: String
    regularExpression: String
    regularSpecs: [RegularSpec]
    status: String
}

type ListLogConfResponse {
    logConfs: [LogConf]
    total: Int
}

type S3Source {
    s3Name: String
    s3Prefix: String
    archiveFormat: String
}

type LogSource {
    sourceId: ID!
    sourceName: String
    logPath: String
    sourceType: LogSourceType
    createdDt: String
    accountId: String
    region: String
    s3Source: S3Source
    eksSource: EKSClusterLogSource
    # ec2Source: EC2Source
}

type ListLogSourceResponse {
    LogSources: [LogSource]
    total: Int
}

input KDSParameterInput {
    kdsArn: String
    streamName: String
    enableAutoScaling: Boolean!
    startShardNumber: Int!
    maxShardNumber: Int
    regionName: String

}

input AOSParameterInput {
    vpc: VPCInput!
    opensearchArn: String!
    opensearchEndpoint: String!
    domainName: String!
    indexPrefix: String!
    warmLogTransition: Int!
    coldLogTransition: Int!
    logRetention: Int!
    shardNumbers: Int!
    replicaNumbers: Int!
    engine: EngineType!
    failedLogBucket: String!
}

type KDSParameter {
    kdsArn: String
    streamName: String
    enableAutoScaling: Boolean
    startShardNumber: Int
    openShardCount: Int
    consumerCount: Int
    maxShardNumber: Int
    regionName: String
    osHelperFnArn: String
}

type AOSParameter {
    opensearchArn: String
    domainName: String
    indexPrefix: String
    warmLogTransition: Int
    coldLogTransition: Int
    logRetention: Int
    shardNumbers: Int
    replicaNumbers: Int
    engine: EngineType

}

type AppPipeline {
    id: ID!
    kdsParas: KDSParameter
    aosParas: AOSParameter
    createdDt: String
    status: PipelineStatus
    tags: [Tag]
}

type ListAppPipelineResponse {
    appPipelines: [AppPipeline]
    total: Int
}

type AppLogIngestion {
    id: ID!
    confId: String
    confName: String
    sourceInfo: LogSource
    stackId: String
    stackName: String
    appPipelineId: String
    createdDt: String
    status: String
    tags: [Tag]
}

type ListAppLogIngestionResponse {
    appLogIngestions: [AppLogIngestion]
    total: Int
}

enum LogAgentStatus {
    Online
    Offline
    Installing
    Installed
    Not_Installed
    Unknown
}

input LogAgentParameterInput {
    agentName: String
    version: String

}

type LogAgentParameter {
    agentName: String
    version: String

}

# InstanceMeta 
type InstanceMeta {
    id: ID!
    logAgent: [LogAgentParameter]
    status: LogAgentStatus
    
}

# Instance info
type Instance {
    id: ID!
    platformName: String
    ipAddress: String
    computerName: String
    name: String
}

type ListInstanceResponse {
    instances:[Instance]
    nextToken: String
}

input RegularSpecInput {
    key: String!
    type: String!
    format: String
}

type RegularSpec {
    key: String!
    type: String!
    format: String
}


type ListEKSClustersResponse {
    clusters: [String]
    nextToken: String
}

type ListImportedEKSClustersResponse{
    eksClusterLogSourceList: [EKSClusterLogSource]
    total: Int
}

enum EKSDeployKind {
    DaemonSet
    Sidecar
}
enum CRI {
    containerd
    docker
}

type EKSClusterLogSource{
    id:ID
    aosDomain:ImportedDomain
    eksClusterName:String
    eksClusterArn:String
    cri:CRI
    vpcId:String
    eksClusterSGId:String
    subnetIds:[String]
    oidcIssuer:String
    endpoint:String  
    createdDt:String
    accountId:String
    region:String
    logAgentRoleArn:String
    deploymentKind:EKSDeployKind
    tags: [Tag]

}
